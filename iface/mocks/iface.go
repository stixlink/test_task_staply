// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stixlink/test_task_staply/iface (interfaces: ImageResizer,ImageValidator,Namer,Downloader)

// Package main_mocks is a generated GoMock package.
package main_mocks

import (
	gomock "github.com/golang/mock/gomock"
	url "net/url"
	os "os"
	reflect "reflect"
)

// MockImageResizer is a mock of ImageResizer interface
type MockImageResizer struct {
	ctrl     *gomock.Controller
	recorder *MockImageResizerMockRecorder
}

// MockImageResizerMockRecorder is the mock recorder for MockImageResizer
type MockImageResizerMockRecorder struct {
	mock *MockImageResizer
}

// NewMockImageResizer creates a new mock instance
func NewMockImageResizer(ctrl *gomock.Controller) *MockImageResizer {
	mock := &MockImageResizer{ctrl: ctrl}
	mock.recorder = &MockImageResizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageResizer) EXPECT() *MockImageResizerMockRecorder {
	return m.recorder
}

// Resize mocks base method
func (m *MockImageResizer) Resize(arg0, arg1 *os.File, arg2, arg3 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize
func (mr *MockImageResizerMockRecorder) Resize(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockImageResizer)(nil).Resize), arg0, arg1, arg2, arg3)
}

// MockImageValidator is a mock of ImageValidator interface
type MockImageValidator struct {
	ctrl     *gomock.Controller
	recorder *MockImageValidatorMockRecorder
}

// MockImageValidatorMockRecorder is the mock recorder for MockImageValidator
type MockImageValidatorMockRecorder struct {
	mock *MockImageValidator
}

// NewMockImageValidator creates a new mock instance
func NewMockImageValidator(ctrl *gomock.Controller) *MockImageValidator {
	mock := &MockImageValidator{ctrl: ctrl}
	mock.recorder = &MockImageValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageValidator) EXPECT() *MockImageValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockImageValidator) Validate(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockImageValidatorMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockImageValidator)(nil).Validate), arg0)
}

// MockNamer is a mock of Namer interface
type MockNamer struct {
	ctrl     *gomock.Controller
	recorder *MockNamerMockRecorder
}

// MockNamerMockRecorder is the mock recorder for MockNamer
type MockNamerMockRecorder struct {
	mock *MockNamer
}

// NewMockNamer creates a new mock instance
func NewMockNamer(ctrl *gomock.Controller) *MockNamer {
	mock := &MockNamer{ctrl: ctrl}
	mock.recorder = &MockNamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamer) EXPECT() *MockNamerMockRecorder {
	return m.recorder
}

// CreateName mocks base method
func (m *MockNamer) CreateName(arg0, arg1 string, arg2 []string) (string, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateName", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// CreateName indicates an expected call of CreateName
func (mr *MockNamerMockRecorder) CreateName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateName", reflect.TypeOf((*MockNamer)(nil).CreateName), arg0, arg1, arg2)
}

// MockDownloader is a mock of Downloader interface
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// DownloadImage mocks base method
func (m *MockDownloader) DownloadImage(arg0 *url.URL) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadImage", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadImage indicates an expected call of DownloadImage
func (mr *MockDownloaderMockRecorder) DownloadImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadImage", reflect.TypeOf((*MockDownloader)(nil).DownloadImage), arg0)
}
